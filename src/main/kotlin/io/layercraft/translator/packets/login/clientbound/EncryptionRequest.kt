package io.layercraft.translator.packets.login.clientbound

import io.ktor.utils.io.core.*
import io.layercraft.translator.packets.*
import io.layercraft.translator.utils.mc

/**
 * Encryption request | 0x01 | login | client-bound
 *
 * @property serverId String (20) - Appears to be empty.
 * @property publicKey VarInt ByteArray - The server's public key, in bytes. Length before as a VarInt.
 * @property verifyToken VarInt ByteArray - A sequence of random bytes generated by the server. Length before as a VarInt.
 * @see <a href="https://wiki.vg/Protocol#Encryption_Request">https://wiki.vg/Protocol#Encryption_Request</a>
 */

@MinecraftPacket(packetId = 0x01, state = PacketState.LOGIN, direction = PacketDirection.CLIENTBOUND)
data class EncryptionRequest(
    val serverId: String,
    val publicKey: ByteArray,
    val verifyToken: ByteArray
): ClientBoundPacket {
    companion object: PacketSerializer<EncryptionRequest> {

        override fun serialize(input: Input): EncryptionRequest {
            val serverId = input.mc.readString(20)
            val publicKey = input.mc.readVarIntByteArray()
            val verifyToken = input.mc.readVarIntByteArray()

            return EncryptionRequest(serverId, publicKey, verifyToken)
        }

        override fun deserialize(output: Output, value: EncryptionRequest) {
            output.mc.writeString(value.serverId, 20)
            output.mc.writeVarIntByteArray(value.publicKey)
            output.mc.writeVarIntByteArray(value.verifyToken)
        }
    }
}
